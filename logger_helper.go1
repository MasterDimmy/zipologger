package main

import (
	"os"
	"strings"

	"github.com/MasterDimmy/zipologger"
)

/*
	Add this file to your project,
*/

var admin_log *zipologger.Logger
var debug_log *zipologger.Logger
var error_log *zipologger.Logger

const (
	LOGGER_MAX_FILESIZE  = 5
	LOGGER_MAX_BACKUPS   = 20
	LOGGER_MAX_AGEINDAYS = 20
)

var logger_init = func() error {
	err := os.Mkdir("logs", 0777)
	if err != nil {
		if !strings.Contains(err.Error(), "Cannot create a file when that file already exists") {
			panic(err)
		}
	}
	admin_log = zipologger.NewLogger("./logs/admin.log", LOGGER_MAX_FILESIZE, LOGGER_MAX_BACKUPS, LOGGER_MAX_AGEINDAYS)
	debug_log = zipologger.NewLogger("./logs/debug.log", LOGGER_MAX_FILESIZE, LOGGER_MAX_BACKUPS, LOGGER_MAX_AGEINDAYS)
	error_log = zipologger.NewLogger("./logs/error.log", LOGGER_MAX_FILESIZE, LOGGER_MAX_BACKUPS, LOGGER_MAX_AGEINDAYS)
	return nil
}()

//ADD THIS TO MAIN!!!!
//defer loggers_wait()
func loggers_wait() {
	admin_log.Wait()
	debug_log.Wait()
	error_log.Wait()
}

func handlePanic() {
	zipologger.HandlePanic(error_log)
}

func errp(format string) {
	send_admin_email("ERROR", error_log.Print(format))
}

func errpf(format string, w1 interface{}, w2 ...interface{}) {
	send_admin_email("ERROR", error_log.Printf(format, w1, w2...))
}

func adminp(format string) {
	send_admin_email("ADMIN", admin_log.Print(format))
}

func adminpf(format string, w1 interface{}, w2 ...interface{}) {
	send_admin_email("ADMIN", admin_log.Printf(format, w1, w2...))
}

func debugp(format string) {
	debug_log.Print(format)
}

func debugpf(format string, w1 interface{}, w2 ...interface{}) {
	debug_log.Printf(format, w1, w2...)
}
